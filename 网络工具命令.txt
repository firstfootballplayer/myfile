netstat -nat|grep 192.168.42.47:8080

netstat -tunlp | grep 9090		查看指定端口号的进程情况使用命令
lsof -i:9090			查看某个端口的占用情况使用命令：
netstat -an |grep tcp   查看所有tcp连接包括LISTEN状态
 -c 5
sudo tcpdump -nn -X -S 'port 6000'
sudo tcpdump -nn -X -S udp and dst 192.168.121.91 and src 192.168.121.80

（strace本身是一个进程，它启动命令行的进程，每个进程启动后发现总有一个进程（thread1默认生成的）在一直输出poll）（续：这个线程是httpclient全局变量中启动的）
 strace -t -T -v -e trace=network -e trace=desc ./cli 
 strace -t -T -v  ./cli 
strace  -f 				跟踪由fork子进程系统调用

valgrind --log-file=./valgrind_report.log --leak-check=full --show-leak-kinds=all --show-reachable=no --track-origins=yes ./
–log-file 指定报告输出文件 –track-origins=yes 是否显示未定义的变量，在堆、栈中被定义没有被initialised的变量都被定义成origins。
默认是关闭这个option的。 –show-leak-kinds=all 这里可以支持的选项有[definite|possible]，一般只需要去关注definite（绝逼），possible是可能会存在。
–leak-check=full 当服务器退出时是否收集输出内存泄漏，选项有[no|summary|full]这个地方我们将其设置成全输出，默认将会使用summary方式。
–workaround-gcc296-bugs=yes 如果你的gcc存在对应的bug，则要设为yes，否则有误报 最后是被检测程序及其参数。

Conditional jump or move depends on uninitialised value(s) ：提示告诉我们依靠没初始化的变量进行条件判断 
still reachable：多数情况不是问题，比如程序是一个服务，一直运行一个while循环，而new出来的对象如果只能
在析构delete，那么对象就永远不会被释放，valgrind就会报这样的问题 指的是内存指针还在 还有机会使用或者释放
如果你后面的程序不用或者不释放也会泄漏  valgrind在当时还不知道以后会不会泄漏

git 有文件的增减时必须要add，只是文件内容变化，可以不用直接commit

prof工具可以找到那20%

perf record  -e cpu-clock ./t1 
sudo  perf script -i ./perf.data &> ./perf.unfold
sudo ./stackcollapse-perf.pl ~/gb28181/bin/perf.data &> ~/gb28181/bin/perf.folded
sudo ./flamegraph.pl ~/gb28181/bin/perf.folded > ~/gb28181/bin/perf.svg

系统平均负载被定义为在特定时间间隔内运行队列中的平均进程数。如果一个进程满足以下条件则其就会位于运行队列中：
它没有在等待I/O操作的结果，它没有主动进入等待状态(也就是没有调用'wait')，没有被停止(例如：等待终止)
一般来说，每个CPU内核当前活动进程数不大于3，则系统运行表现良好！当然这里说的是每个cpu内核，也就是如果你的主机是四核cpu的话，那么只要uptime最后输出的一串字符数值小于12即表示系统负载不是很严重.
一个大循环程序为1
cat /proc/loadavg	除了前3个数字表示平均进程数量外，后面的1个分数，分母表示系统进程总数，分子表示正在运行的进程数；最后一个数字表示最近运行的进程ID

        