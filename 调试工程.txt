gdb 中用dir [filepath]找到要调试文件的路径，可添加多个路径
set debug-file-directory可不进入c标准库c++还是能进
监视（watch）添加表达式，断点时判断是否成立
断点处右键添加表达式 条件断点
左下断点信息处+号条件函数断点
控制台-exec command 执行gdb命令
"sourceFileMap":可将源文件路径替换
右键变量，执行操作
 "cwd": "${workspaceFolder}",在设置了工作区时有效
断点日志直接在里面输入要打印的信息即可
右键编辑断点，选择命中此数，日志等等

查找什么时候向容器里放入对象，可在对象的构造函数断点查看

一运行程序崩了，看日志信息，大概在哪个位置，信息量少可能在开头，注释掉后面的从前往后一点点编译运行，看看是那块出问题了

windows FILE打开510最多，用完释放，不释放fopen返回null，在调用fwrite会出现expresssion :(stream = null)

时间跨度太大，几百万信息，一直new进vec导致allocator_bad,后查看vs进程内存，发现达到了2g

自己写了select后，用strace发现，select一直返回1，说明一直有事件发生，日志看到timefd read error，想自己没有添加过定时器事件怎么会
定时器回调函数一直在调用，用pause在timer的构造函数看看有没有生成过定时器，发现没有，在strace里看到select的fd有3,4,5有两个怎么会
加上去的，在update函数里查看堆栈信息，发现有3次调用了，fd3,4是库初始化时绑定的timerfd和wakeupfd，在update函数过滤这两个不绑定
发现问题仍在但是这次连接后没有问题了，当客户端发送消息时仍存在问题，只是不再是timefd read error了，变成了另一个错误，怀疑fd_set问题，
经打印fd_set的值比较了wset和oset发现没有问题，通过gdb发现fillactive函数里if(FD_ISSET(sockfd, &w_readset_)) 不成立，select返回了怎么会找
不到可读事件呢？问题基本锁定在这个函数里，因为知道了客户端的fd是7，通过打印看看fd能不能对上，仔细观察发现，写的逻辑有问题，gdb里
调试第一次总是不成立是因为这里是for第一次不是可读fd而是listenfd=5，自然不会判断成功而且
 activeChannels->push_back(channel); if(--numEvents <= 0) break;写在了if的外层，所以即使不成功事件也被推入激活列表，且numevents总是
调用第一次就break出去了，在执行激活事件时，是在执行第一个fd的回调，即listen的回调自然出错了，之前是在执行timefd的回调

调试第三方库，在连接建立回调函数中设置定时器（作用是接收响应超时），在可读回调函数取消定时器，用socket工具做服务端测试发现在及时
收到数据后能成功取消定时器，但是在放到运行环境中不管有没有收到数据都会超时，怀疑是用工具手点比较慢，而运行环境中服务器收到请求直接
回复，在连接建立回调中设置定时器可能还没有绑定到io复用上，取消函数被调用后才绑定上去的导致取消函数失效，在可读回调取消函数前加延时
验证，不管用。用strace查看程序运行情况，发现在readv=0和closefd中间还调用了一次timerfd_settime设置的时间也是我设置的，怀疑连接关闭时
又设置了一次超时，在源码里找到timerfd_settime这个函数在调用它的函数里打印堆栈信息，看到确实在连接关闭的处理函数中会调用一次连接建立
回调函数即我设置的那个，所以不管有没有收到响应都会超时。而用socket工具没有测出来是因为，我在回复消息后没有断开连接，所以没有调用到
连接关闭处理函数

在channel析构函数中assert(!addedToLoop_);失败，addedToLoop_这个标志位是在Channel::remove()函数中置位的，所以应该是没有调用到
这个函数过，经验证确实没有，在可读回调里执行 conn->forceClose()其中会将TcpConnection::forceCloseInLoop放入loop的任务队列，接着执行
 loop_->quit();将 quit_ = true;在下一次循环退出，在loop函数中执行完这次的可读回调后接着 doPendingFunctors();即运行在可读回调放入任务队列
的函数即TcpConnection::forceCloseInLoop而在这个函数中经一些处理后又会将TcpConnection::connectDestroyed放入任务队列，这样这个函数
只能等到下一个循环才能执行了它里面才会真正调用到Channel::remove()，而到下一个循环会退出loop了这个函数没有机会执行了

在程序运行一段时间后crash了，通过调试coredump发现，在vector的resize函数中抛出了bad_alloc异常导致，调用栈发现是在读套接字的时候
调用的，大概率是vector内存分配失败了，怀疑是内存泄漏或者内存占用太大，将程序继续运行如何用top命令查看内存占用情况，在运行了一段
时间后发现这个进程的内存占用率越来越大，想到了一次性接收的数据中图片是很大的1m多，这会让缓冲区扩容，而连接数量在上千时，每一个
连接在接收到图片后进程整体的内存使用很大。以前用swap清除11推出了shrink_to_fit();

在例程里能用，到自己工程里不行，通过打印返回信息，查看错误值是多少，找到对应的错误宏，全局搜索这个宏在哪几个函数返回，在全局搜索
这几个函数哪里调用，可大致确定范围，在通过strace查看那个系统调用返回值是错误值。能确定错误，比如多次bind，则全局搜索bind函数调用
能找到问题

coredump bt看到SipMediaSession::handleReadable (this=0x0, 。。。）这个指针为null，调用这个函数后继续调用了几个函数，说明操作null指针
不会立即出错，可能要继续往下走。bt看到的crash真正的原因可能在前几帧，实际原因是在move uniqueptr后使用了它，应该在使用后再move。
